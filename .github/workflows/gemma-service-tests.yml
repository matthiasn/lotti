name: Gemma Service Tests

permissions:
  contents: read

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/gemma-local/**'
      - '.github/workflows/gemma-service-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'services/gemma-local/**'
      - '.github/workflows/gemma-service-tests.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/gemma-local/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: services/gemma-local
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Lint with flake8
      working-directory: services/gemma-local
      run: |
        # Install flake8 if not in requirements
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      working-directory: services/gemma-local
      run: |
        pip install mypy types-requests
        # Type check the source code (ignore legacy modules for now)
        mypy src --ignore-missing-imports --disable-error-code=import

    - name: Run unit tests
      working-directory: services/gemma-local
      run: |
        pytest tests/unit -v --cov=src --cov-report=xml --cov-report=term-missing
      env:
        # Set test environment variables
        GEMMA_CACHE_DIR: /tmp/test-cache
        LOG_LEVEL: DEBUG

    - name: Run integration tests
      working-directory: services/gemma-local
      run: |
        pytest tests/integration -v
      env:
        GEMMA_CACHE_DIR: /tmp/test-cache
        LOG_LEVEL: DEBUG

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: services/gemma-local/coverage.xml
        directory: services/gemma-local
        flags: gemma-service
        name: gemma-service-coverage
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: services/gemma-local
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      working-directory: services/gemma-local
      run: |
        safety check -r requirements.txt -r requirements-test.txt --json || true

    - name: Run bandit security scan
      working-directory: services/gemma-local
      run: |
        bandit -r src -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: services/gemma-local/bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      working-directory: services/gemma-local
      run: |
        docker build -t gemma-local-service:latest .

    - name: Test Docker image
      working-directory: services/gemma-local
      run: |
        # Start container in background
        docker run -d --name test-container -p 8000:8000 \
          -e LOG_LEVEL=INFO \
          gemma-local-service:latest

        # Wait for container to start
        sleep 10

        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1

        # Clean up
        docker stop test-container
        docker rm test-container

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      working-directory: services/gemma-local
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install locust

    - name: Run performance tests
      working-directory: services/gemma-local
      run: |
        # Create a simple locust test file
        cat << 'EOF' > locustfile.py
        from locust import HttpUser, task, between
        import json

        class GemmaServiceUser(HttpUser):
            wait_time = between(1, 3)

            @task
            def health_check(self):
                self.client.get("/health")

            @task(3)
            def chat_completion(self):
                payload = {
                    "model": "gemma-3n-E2B-it",
                    "messages": [{"role": "user", "content": "Hello"}],
                    "max_tokens": 50
                }
                self.client.post("/v1/chat/completions", json=payload)
        EOF

        # Run a quick performance test (this would need a running service in real scenario)
        echo "Performance test configuration created"