app-id: com.matthiasnehlsen.lotti
runtime: org.freedesktop.Platform
runtime-version: '24.08'
sdk: org.freedesktop.Sdk
add-extensions:
  org.freedesktop.Platform.ffmpeg-full:
    directory: lib/ffmpeg
    version: '24.08'
    add-ld-path: .
command: /app/lotti-wrapper
finish-args:
  - --share=network
  - --share=ipc
  - --socket=fallback-x11
  - --socket=wayland
  - --socket=pulseaudio
  - --device=dri
  # Secure filesystem permissions following principle of least privilege
  - --filesystem=xdg-documents/Lotti:create    # Only create Lotti folder in documents
  - --filesystem=xdg-pictures:ro               # Read-only access to pictures for import
  - --filesystem=xdg-download/Lotti:create     # Only create Lotti folder in downloads
  # App data is automatically available in ~/.var/app/com.matthiasnehlsen.lotti/
  
modules:
  - name: libsecret
    buildsystem: meson
    config-opts:
      - -Dmanpage=false
      - -Dvapi=false
      - -Dgcrypt=false
      - -Dgtk_doc=false
      - -Dintrospection=false
    sources:
      - type: archive
        url: https://gitlab.gnome.org/GNOME/libsecret/-/archive/0.20.5/libsecret-0.20.5.tar.gz
        sha256: b33b9542222ea8866f6ff2d31c0ad373877c2277db546ca00cc7fdda9cbab1c3

  # Desktop drop plugin - pre-compiled binary
  # This is a Flutter plugin that enables drag-and-drop functionality on Linux desktop
  # The binary is built separately and included here as it requires specific compilation
  # flags and dependencies that are difficult to replicate in the Flatpak build environment
  - name: desktop-drop-plugin
    buildsystem: simple
    build-commands:
      - mkdir -p /app/lib
      - install -D libdesktop_drop_plugin.so /app/lib/
    sources:
      - type: file
        path: libdesktop_drop_plugin.so

  - name: lotti
    buildsystem: simple
    build-options:
      strip: true
      no-debuginfo: true
    build-commands:
      - echo "Installing Flutter bundle..."
      - cp -r flutter-bundle/* /app/
      - chmod +x /app/lotti
      - echo "Creating lib directory for additional libraries..."
      - mkdir -p /app/lib/ffmpeg
      - echo "Creating functional libmpv stub to satisfy media_kit plugin..."
      - |
        cat > stub_libmpv.c << 'EOF'
        #include <stddef.h>
        #include <stdio.h>
        #include <stdlib.h>
        #include <string.h>
        
        // Mock context structure
        typedef struct {
            int initialized;
            int dummy;
        } stub_mpv_handle;
        
        // Mock event structure
        typedef struct {
            int event_id;
            int error;
            void* data;
        } stub_mpv_event;
        
        static stub_mpv_event dummy_event = {0, 0, NULL};
        
        // More functional stub functions
        void* mpv_create(void) { 
            stub_mpv_handle* handle = malloc(sizeof(stub_mpv_handle));
            if (handle) {
                handle->initialized = 0;
                handle->dummy = 0;
            }
            return handle;
        }
        
        int mpv_initialize(void* ctx) { 
            if (ctx) {
                ((stub_mpv_handle*)ctx)->initialized = 1;
                return 0; // Success
            }
            return -1; 
        }
        
        int mpv_set_option_string(void* ctx, const char* name, const char* data) { 
            return ctx ? 0 : -1; 
        }
        
        int mpv_command_string(void* ctx, const char* args) { 
            return ctx ? 0 : -1; 
        }
        
        void mpv_destroy(void* ctx) { 
            if (ctx) free(ctx); 
        }
        
        const char* mpv_error_string(int error) { 
            return error == 0 ? "success" : "stub error"; 
        }
        
        void mpv_set_wakeup_callback(void* ctx, void* cb, void* d) {}
        
        int mpv_get_property(void* ctx, const char* name, int format, void* data) { 
            return ctx ? 0 : -1; 
        }
        
        int mpv_set_property(void* ctx, const char* name, int format, void* data) { 
            return ctx ? 0 : -1; 
        }
        
        int mpv_observe_property(void* ctx, int userdata, const char* name, int format) { 
            return ctx ? 0 : -1; 
        }
        
        void* mpv_wait_event(void* ctx, double timeout) { 
            return ctx ? &dummy_event : NULL; 
        }
        
        // Additional common functions that might be needed
        const char* mpv_client_api_version(void) { return "2.0"; }
        void mpv_terminate_destroy(void* ctx) { mpv_destroy(ctx); }
        int mpv_load_config_file(void* ctx, const char* filename) { return ctx ? 0 : -1; }
        EOF
        
        gcc -shared -fPIC -o /app/lib/libmpv.so.1 stub_libmpv.c
        ln -sf libmpv.so.1 /app/lib/libmpv.so
        rm -f stub_libmpv.c
        echo "Functional stub libmpv created"
      - echo "Creating wrapper script to set library search path..."
      - |
        cat > /app/lotti-wrapper << 'EOF'
        #!/bin/bash
        export LD_LIBRARY_PATH=/app/lib:$LD_LIBRARY_PATH
        
        # Set GDK_BACKEND conditionally: prefer Wayland, fallback to X11 when needed
        if [ -z "$WAYLAND_DISPLAY" ] || [ "$XDG_SESSION_TYPE" != "wayland" ]; then
          # Fallback to X11 when Wayland is not available
          export GDK_BACKEND=x11
        fi
        # If Wayland is available, leave GDK_BACKEND unset to use Wayland by default
        
        cd /app
        exec ./lotti "$@"
        EOF
      - chmod +x /app/lotti-wrapper
      - echo "Wrapper script created with conditional GDK_BACKEND setting"
    sources:
      - type: dir
        path: flutter-bundle

  - name: flutter-common
    buildsystem: simple
    build-commands:
      - install -D com.matthiasnehlsen.lotti.desktop /app/share/applications/com.matthiasnehlsen.lotti.desktop
      - install -D com.matthiasnehlsen.lotti.generated.metainfo.xml /app/share/metainfo/com.matthiasnehlsen.lotti.metainfo.xml
      # Install icons with proper sizes (max 512x512)
      - install -D app_icon_512.png /app/share/icons/hicolor/512x512/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_256.png /app/share/icons/hicolor/256x256/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_128.png /app/share/icons/hicolor/128x128/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_64.png /app/share/icons/hicolor/64x64/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_48.png /app/share/icons/hicolor/48x48/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_32.png /app/share/icons/hicolor/32x32/apps/com.matthiasnehlsen.lotti.png
      - install -D app_icon_16.png /app/share/icons/hicolor/16x16/apps/com.matthiasnehlsen.lotti.png
    sources:
      - type: file
        path: com.matthiasnehlsen.lotti.desktop
      - type: file
        path: com.matthiasnehlsen.lotti.generated.metainfo.xml
      - type: file
        path: app_icon_512.png
      - type: file
        path: app_icon_256.png
      - type: file
        path: app_icon_128.png
      - type: file
        path: app_icon_64.png
      - type: file
        path: app_icon_48.png
      - type: file
        path: app_icon_32.png
      - type: file
        path: app_icon_16.png