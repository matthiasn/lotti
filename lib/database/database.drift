CREATE TABLE journal (
  id TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  date_from DATETIME NOT NULL,
  date_to DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  starred BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  task BOOLEAN NOT NULL DEFAULT FALSE,
  task_status TEXT,
  flag INTEGER NOT NULL DEFAULT 0,
  type TEXT NOT NULL,
  subtype TEXT,
  serialized TEXT NOT NULL,
  schema_version INTEGER NOT NULL DEFAULT 0,
  plain_text TEXT,
  latitude REAL,
  longitude REAL,
  geohash_string TEXT,
  geohash_int INTEGER,
  category TEXT NOT NULL DEFAULT '',
  PRIMARY KEY (id)
) as JournalDbEntity;

CREATE INDEX idx_journal_date_from_asc ON journal (date_from ASC);
CREATE INDEX idx_journal_date_from_desc ON journal (date_from DESC);
CREATE INDEX idx_journal_date_to_asc ON journal (date_to ASC);
CREATE INDEX idx_journal_date_to_desc ON journal (date_to DESC);

CREATE INDEX idx_journal_tab ON journal(type COLLATE BINARY ASC, starred COLLATE BINARY ASC, flag COLLATE BINARY ASC, private COLLATE BINARY ASC, date_from COLLATE BINARY DESC);
CREATE INDEX idx_journal_tasks ON journal(type COLLATE BINARY ASC, task_status COLLATE BINARY ASC, category COLLATE BINARY ASC, date_from COLLATE BINARY DESC);
CREATE INDEX idx_journal_type_subtype ON journal(type COLLATE BINARY ASC, subtype COLLATE BINARY ASC, category COLLATE BINARY ASC, date_from COLLATE BINARY DESC);

CREATE TABLE conflicts (
  id TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  serialized TEXT NOT NULL,
  schema_version INTEGER NOT NULL DEFAULT 0,
  status INTEGER NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE measurable_types (
  id TEXT NOT NULL,
  unique_name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  version INTEGER NOT NULL DEFAULT 0,
  status INTEGER NOT NULL,
  PRIMARY KEY (id)
) as MeasurableDbEntity;

CREATE TABLE habit_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  active BOOLEAN NOT NULL,
  PRIMARY KEY (id)
) as HabitDefinitionDbEntity;

CREATE INDEX idx_habit_definitions_id ON habit_definitions (id);
CREATE INDEX idx_habit_definitions_name ON habit_definitions (name);
CREATE INDEX idx_habit_definitions_private ON habit_definitions (private);

CREATE TABLE category_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  active BOOLEAN NOT NULL,
  PRIMARY KEY (id)
) as CategoryDefinitionDbEntity;

CREATE INDEX idx_category_definitions_id ON category_definitions (id);
CREATE INDEX idx_category_definitions_name ON category_definitions (name);
CREATE INDEX idx_category_definitions_private ON category_definitions (private);

CREATE TABLE label_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL UNIQUE,
  color TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  PRIMARY KEY (id)
) as LabelDefinitionDbEntity;

CREATE INDEX idx_label_definitions_id ON label_definitions (id);
CREATE INDEX idx_label_definitions_name ON label_definitions (name);
CREATE INDEX idx_label_definitions_private ON label_definitions (private);

CREATE TABLE dashboard_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  last_reviewed DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  active BOOLEAN NOT NULL,
  PRIMARY KEY (id)
) as DashboardDefinitionDbEntity;

CREATE INDEX idx_dashboard_definitions_id ON dashboard_definitions (id);
CREATE INDEX idx_dashboard_definitions_name ON dashboard_definitions (name);
CREATE INDEX idx_dashboard_definitions_private ON dashboard_definitions (private);

CREATE TABLE config_flags (
  name TEXT NOT NULL UNIQUE,
  description TEXT NOT NULL UNIQUE,
  status BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (name)
);

CREATE TABLE tag_entities (
  id TEXT NOT NULL UNIQUE,
  tag TEXT NOT NULL,
  type TEXT NOT NULL,
  inactive BOOLEAN DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN DEFAULT FALSE,
  serialized TEXT NOT NULL,
  PRIMARY KEY (id),
  UNIQUE(tag, type)
) as TagDbEntity;

CREATE INDEX idx_tag_entities_id ON tag_entities (id);
CREATE INDEX idx_tag_entities_tag ON tag_entities (tag);
CREATE INDEX idx_tag_entities_type ON tag_entities (type);
CREATE INDEX idx_tag_entities_private ON tag_entities (private);
CREATE INDEX idx_tag_entities_inactive ON tag_entities (inactive);

CREATE TABLE tagged (
  id TEXT NOT NULL UNIQUE,
  journal_id TEXT NOT NULL,
  tag_entity_id TEXT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY(journal_id) REFERENCES journal(id) ON DELETE CASCADE,
  FOREIGN KEY(tag_entity_id) REFERENCES tag_entities(id) ON DELETE CASCADE,
  UNIQUE(journal_id, tag_entity_id)
) as TaggedWith;

CREATE INDEX idx_tagged_journal_id ON tagged (journal_id);
CREATE INDEX idx_tagged_tag_entity_id ON tagged (tag_entity_id);

CREATE TABLE labeled (
  id TEXT NOT NULL UNIQUE,
  journal_id TEXT NOT NULL,
  label_id TEXT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY(journal_id) REFERENCES journal(id) ON DELETE CASCADE,
  FOREIGN KEY(label_id) REFERENCES label_definitions(id) ON DELETE CASCADE,
  UNIQUE(journal_id, label_id)
) as LabeledWith;

CREATE INDEX idx_labeled_journal_id ON labeled (journal_id);
CREATE INDEX idx_labeled_label_id ON labeled (label_id);

CREATE TABLE linked_entries (
  id TEXT NOT NULL UNIQUE,
  from_id TEXT NOT NULL,
  to_id TEXT NOT NULL,
  type TEXT NOT NULL,
  serialized TEXT NOT NULL,
  hidden BOOLEAN DEFAULT FALSE,
  created_at DATETIME,
  updated_at DATETIME,
  PRIMARY KEY (id),
  UNIQUE(from_id, to_id, type)
) as LinkedDbEntry;

CREATE INDEX idx_linked_entries_from_id ON linked_entries (from_id);
CREATE INDEX idx_linked_entries_to_id ON linked_entries (to_id);
CREATE INDEX idx_linked_entries_type ON linked_entries (type);
CREATE INDEX idx_linked_entries_hidden ON linked_entries (hidden);

CREATE INDEX idx_linked_entries_from_id_hidden ON linked_entries(from_id COLLATE BINARY ASC, hidden COLLATE BINARY ASC);
CREATE INDEX idx_linked_entries_to_id_hidden ON linked_entries(from_id COLLATE BINARY ASC, hidden COLLATE BINARY ASC);

/* Queries ----------------------------------------------------- */
listConfigFlags:
SELECT *
  FROM config_flags;

configFlagByName:
SELECT *
  FROM config_flags
  WHERE name = :name;

filteredJournal:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  AND flag IN :flaggedStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredJournalByCategories:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  AND flag IN :flaggedStatuses
  AND category IN :categories
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredJournalIds:
SELECT id FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  AND flag IN :flaggedStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredJournalIds2:
SELECT id FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  AND flag IN :flaggedStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredByTagJournal:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  AND flag IN :flaggedStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredByTaggedWithId:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT journal_id FROM tagged WHERE tag_entity_id = :tag_id)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  ORDER BY date_from DESC
  LIMIT :limit;

filteredByTaggedWithIds:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT journal_id FROM tagged WHERE tag_entity_id IN :tag_ids)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  ORDER BY date_from DESC
  LIMIT :limit;

sortedCalenderEntriesInRange:
SELECT * FROM journal
  WHERE type in ('JournalEntry', 'WorkoutEntry') AND
  deleted = false
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  ORDER BY date_from DESC;

filteredByTagMatch:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN
    (SELECT journal_id FROM tagged WHERE tag_entity_id IN
      (SELECT id FROM tag_entities WHERE tag LIKE :match
                AND private IN (0,
                  (SELECT status FROM config_flags WHERE name = 'private'))
                AND deleted = false))
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  ORDER BY date_from DESC;

filteredTasks:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  AND category IN :categories
  -- Label filtering (OR semantics):
  -- - If :filterByLabels is true, include rows that either
  --   a) have any of the selected labels (when :labelFilterCount > 0), or
  --   b) are unlabeled (when :includeUnlabeled is true).
  -- - Otherwise, pass through without label-based filtering.
  -- Note: The :labelIds parameter is never an empty list (see effectiveLabelIds
  --       in database.dart). Using a non-empty list avoids an invalid `IN ()` clause.
  AND (
    CASE
      WHEN :filterByLabels THEN
        CASE
          WHEN :labelFilterCount > 0 AND id IN (
            SELECT journal_id FROM labeled WHERE label_id IN :labelIds
          ) THEN 1
          WHEN :includeUnlabeled AND id NOT IN (SELECT journal_id FROM labeled) THEN 1
          ELSE 0
        END
      ELSE 1
    END
  ) = 1
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredTasks2:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  AND category IN :categories
  AND (
    CASE
      WHEN :filterByLabels THEN
        CASE
          WHEN :labelFilterCount > 0 AND id IN (
            SELECT journal_id FROM labeled WHERE label_id IN :labelIds
          ) THEN 1
          WHEN :includeUnlabeled AND id NOT IN (SELECT journal_id FROM labeled) THEN 1
          ELSE 0
        END
      ELSE 1
    END
  ) = 1
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredTaskIds:
SELECT id FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

filteredTaskIds2:
SELECT id FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

orderedJournal:
SELECT * FROM journal
  WHERE deleted = false
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

orderedJournalInterval:
SELECT * FROM journal
  WHERE deleted = false
  AND updated_at > :start
  AND updated_at < :end
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

orderedAudioEntries:
SELECT * FROM journal
  WHERE type = 'JournalAudio'
  AND deleted = false
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

entriesFlaggedImport:
SELECT * FROM journal
  WHERE deleted = false AND flag = 1
  ORDER BY date_from DESC
  LIMIT :limit;

conflictsByStatus:
SELECT * FROM conflicts
  WHERE status = :status
  ORDER BY created_at DESC
  LIMIT :limit;

conflictsById:
SELECT * FROM conflicts
  WHERE id = :id
  ORDER BY created_at DESC;

activeMeasurableTypes:
SELECT * FROM measurable_types
  WHERE deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

measurableTypeById:
SELECT * FROM measurable_types
  WHERE deleted = false
  AND id = :id
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

measurementsByType:
SELECT * FROM journal
  WHERE type = 'MeasurementEntry'
  AND subtype = :subtype
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  AND deleted = false
  ORDER BY date_from DESC;

habitCompletionsByHabitId:
SELECT * FROM journal
  WHERE type = 'HabitCompletionEntry'
  AND subtype = :habitId
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  AND deleted = false
  ORDER BY date_from DESC;

habitCompletionsInRange:
SELECT * FROM journal
  WHERE type = 'HabitCompletionEntry'
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND date_from >= :rangeStart
  AND deleted = false
  ORDER BY date_from ASC;

quantitativeByType:
SELECT * FROM journal
  WHERE type = 'QuantitativeEntry'
  AND subtype = :subtype
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  AND deleted = false
  ORDER BY date_from DESC;

latestQuantByType:
SELECT * FROM journal
  WHERE type = 'QuantitativeEntry'
  AND subtype = :subtype
  AND deleted = false
  ORDER BY date_from DESC
  LIMIT 1;

workouts:
SELECT * FROM journal
  WHERE type = 'WorkoutEntry'
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  AND deleted = false
  ORDER BY date_from DESC;

findLatestWorkout:
SELECT * FROM journal
  WHERE type = 'WorkoutEntry'
  AND deleted = false
  ORDER BY date_to DESC
  LIMIT 1;

surveysByType:
SELECT * FROM journal
  WHERE type = 'SurveyEntry'
  AND subtype LIKE :subtype
  AND date_from >= :rangeStart
  AND date_to <= :rangeEnd
  AND deleted = false
  ORDER BY date_from DESC;

countJournalEntries:
SELECT COUNT(*) FROM journal
  WHERE deleted = false;

countImportFlagEntries:
SELECT COUNT(*) FROM journal
  WHERE deleted = false AND flag = 1;

countInProgressTasks:
SELECT COUNT(*) FROM journal
  WHERE deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND task = 1
  AND task_status IN :taskStatuses;

allTagEntities:
SELECT * FROM tag_entities
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false
  ORDER BY tag COLLATE NOCASE;

allDashboards:
SELECT * FROM dashboard_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false
  ORDER BY name COLLATE NOCASE;

dashboardById:
SELECT * FROM dashboard_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND id = :id
  AND deleted = false;

allHabitDefinitions:
SELECT * FROM habit_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false;

habitById:
SELECT * FROM habit_definitions
  WHERE deleted = false
  AND id = :id
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

allCategoryDefinitions:
SELECT * FROM category_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false
  ORDER BY name COLLATE NOCASE;

categoryById:
SELECT * FROM category_definitions
  WHERE deleted = false
  AND id = :id
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

allLabelDefinitions:
SELECT * FROM label_definitions
  WHERE deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY name COLLATE NOCASE;

labelDefinitionById:
SELECT * FROM label_definitions
  WHERE deleted = false
  AND id = :id
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

matchingTagEntities:
SELECT * FROM tag_entities
  WHERE tag LIKE :match
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND inactive IN (0, :inactive)
  AND deleted = false
  LIMIT :limit;

deleteTaggedForId:
DELETE FROM tagged
  WHERE journal_id = :id;

labeledForJournal:
SELECT label_id FROM labeled
  WHERE journal_id = :journal_id;

deleteLabeledRow:
DELETE FROM labeled
  WHERE journal_id = :journal_id
  AND label_id = :label_id;

deleteLabeledForId:
DELETE FROM labeled
  WHERE journal_id = :journal_id;

purgeDeletedDashboards:
DELETE FROM dashboard_definitions
  WHERE deleted = TRUE;

purgeDeletedMeasurables:
DELETE FROM measurable_types
  WHERE deleted = TRUE;

purgeDeletedLabelDefinitions:
DELETE FROM label_definitions
  WHERE deleted = TRUE;

purgeDeletedTagEntities:
DELETE FROM tag_entities
  WHERE deleted = TRUE;

purgeDeletedJournalEntities:
DELETE FROM journal
  WHERE deleted = TRUE;

deleteTagged:
DELETE FROM tagged;

entryIdsForTagId:
SELECT journal_id FROM tagged
  WHERE tag_entity_id = :tag_id;

countTagged:
SELECT COUNT(*) FROM tagged;

countLabeled:
SELECT COUNT(*) FROM labeled;

linkedJournalEntities:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT to_id FROM linked_entries WHERE from_id = :from_id AND hidden = false)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

journalEntityIdsByDateFromDesc:
SELECT id FROM journal
  WHERE deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

linksForIds:
SELECT * FROM linked_entries
  WHERE to_id IN :to_ids;

linksFromIds:
SELECT * FROM linked_entries
  WHERE from_id IN :from_ids
  AND hidden = false;

entriesForIds:
SELECT * FROM journal
  WHERE id IN :ids;

journalEntitiesByIds:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

linkedJournalEntityIds:
SELECT to_id FROM linked_entries WHERE from_id = :from_id AND hidden IN :hidden;

linksFromId:
SELECT * FROM linked_entries
  WHERE from_id = :from_id
  AND hidden IN :hidden
  ORDER BY created_at DESC;

linkedToJournalEntities:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT from_id FROM linked_entries WHERE to_id = :to_id)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

deleteLink:
DELETE FROM linked_entries
  WHERE from_id = :from_id
  AND to_id = :to_id;

workEntriesInDateRange:
SELECT * FROM journal
  WHERE deleted = false
  AND type IN :types
  AND category IN :categoryIds  
  AND date_from >= :startDate
  AND date_from <= :endDate
  AND (
    -- For JournalAudio, include all entries
    type = 'JournalAudio'
    OR 
    -- For JournalEntry, only include entries with duration >= 15 seconds
    (type = 'JournalEntry' AND (julianday(date_to) - julianday(date_from)) * 24 * 3600 >= 15)
  )
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;
