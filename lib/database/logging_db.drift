CREATE TABLE log_entries (
  id TEXT NOT NULL,
  created_at TEXT NOT NULL,
  domain TEXT NOT NULL,
  sub_domain TEXT,
  type TEXT NOT NULL,
  level TEXT NOT NULL,
  message TEXT NOT NULL,
  stacktrace TEXT,
  data TEXT,
  PRIMARY KEY (id)
) as LogEntry;

CREATE INDEX log_entries_created_at
ON log_entries (created_at);

CREATE INDEX log_entries_level
ON log_entries (level);

CREATE INDEX log_entries_domain
ON log_entries (domain);

CREATE INDEX log_entries_sub_domain
ON log_entries (sub_domain);

/* Queries ----------------------------------------------------- */
allLogEntries:
SELECT * FROM log_entries
  ORDER BY created_at DESC
  LIMIT :limit;

filteredByLevel:
SELECT * FROM log_entries
  WHERE level IN :levels
  ORDER BY created_at DESC
  LIMIT :limit;

logEntryById:
SELECT * FROM log_entries
  WHERE id = :id;

-- Search through entire log database without limit
-- This allows finding ALL matching logs, not just recent ones
-- Performance is managed through debouncing and efficient SQL
searchLogEntries:
SELECT * FROM log_entries
  WHERE (
    LOWER(message) LIKE :searchQuery OR
    LOWER(domain) LIKE :searchQuery OR
    (sub_domain IS NOT NULL AND LOWER(sub_domain) LIKE :searchQuery)
  )
  ORDER BY created_at DESC;

-- Paginated search query for better performance with large datasets
-- Limits memory usage by loading only a subset of results
searchLogEntriesPaginated:
SELECT * FROM log_entries
  WHERE (
    LOWER(message) LIKE :searchQuery OR
    LOWER(domain) LIKE :searchQuery OR
    (sub_domain IS NOT NULL AND LOWER(sub_domain) LIKE :searchQuery)
  )
  ORDER BY created_at DESC
  LIMIT :limit OFFSET :offset;

-- Count query for pagination information
-- Returns total number of matching results without loading all data
searchLogEntriesCount:
SELECT COUNT(*) FROM log_entries
  WHERE (
    LOWER(message) LIKE :searchQuery OR
    LOWER(domain) LIKE :searchQuery OR
    (sub_domain IS NOT NULL AND LOWER(sub_domain) LIKE :searchQuery)
  );
