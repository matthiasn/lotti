CREATE TABLE journal (
  id TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  date_from DATETIME NOT NULL,
  date_to DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  starred BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  task BOOLEAN NOT NULL DEFAULT FALSE,
  task_status TEXT,
  flag INTEGER NOT NULL DEFAULT 0,
  type TEXT NOT NULL,
  subtype TEXT,
  serialized TEXT NOT NULL,
  schema_version INTEGER NOT NULL DEFAULT 0,
  plain_text TEXT,
  latitude REAL,
  longitude REAL,
  geohash_string TEXT,
  geohash_int INTEGER,
  PRIMARY KEY (id)
) as JournalDbEntity;

CREATE INDEX idx_journal_created_at
ON journal (created_at);

CREATE INDEX idx_journal_updated_at
ON journal (updated_at);

CREATE INDEX idx_journal_date_from
ON journal (date_from);

CREATE INDEX idx_journal_date_to
ON journal (date_to);

CREATE INDEX idx_journal_deleted
ON journal (deleted);

CREATE INDEX idx_journal_starred
ON journal (starred);

CREATE INDEX idx_journal_private
ON journal (private);

CREATE INDEX idx_journal_task
ON journal (task);

CREATE INDEX idx_journal_task_status
ON journal (task_status);

CREATE INDEX idx_journal_flag
ON journal (flag);

CREATE INDEX idx_journal_type
ON journal (type);

CREATE INDEX idx_journal_subtype
ON journal (subtype);

CREATE INDEX idx_journal_geohash_string
ON journal (geohash_string);

CREATE INDEX idx_journal_geohash_int
ON journal (geohash_int);

CREATE TABLE conflicts (
  id TEXT NOT NULL,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  serialized TEXT NOT NULL,
  schema_version INTEGER NOT NULL DEFAULT 0,
  status INTEGER NOT NULL,
  PRIMARY KEY (id)
);

CREATE TABLE measurable_types (
  id TEXT NOT NULL,
  unique_name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  version INTEGER NOT NULL DEFAULT 0,
  status INTEGER NOT NULL,
  PRIMARY KEY (id)
) as MeasurableDbEntity;

CREATE TABLE habit_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  active BOOLEAN NOT NULL,
  PRIMARY KEY (id)
) as HabitDefinitionDbEntity;

CREATE INDEX idx_habit_definitions_id
ON habit_definitions (id);

CREATE INDEX idx_habit_definitions_name
ON habit_definitions (name);

CREATE INDEX idx_habit_definitions_private
ON habit_definitions (private);

CREATE TABLE dashboard_definitions (
  id TEXT NOT NULL,
  name TEXT NOT NULL UNIQUE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  last_reviewed DATETIME NOT NULL,
  deleted BOOLEAN NOT NULL DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  serialized TEXT NOT NULL,
  active BOOLEAN NOT NULL,
  PRIMARY KEY (id)
) as DashboardDefinitionDbEntity;

CREATE INDEX idx_dashboard_definitions_id
ON dashboard_definitions (id);

CREATE INDEX idx_dashboard_definitions_name
ON dashboard_definitions (name);

CREATE INDEX idx_dashboard_definitions_private
ON dashboard_definitions (private);

CREATE TABLE config_flags (
  name TEXT NOT NULL UNIQUE,
  description TEXT NOT NULL UNIQUE,
  status BOOLEAN NOT NULL DEFAULT FALSE,
  PRIMARY KEY (name)
);

CREATE TABLE tag_entities (
  id TEXT NOT NULL UNIQUE,
  tag TEXT NOT NULL,
  type TEXT NOT NULL,
  inactive BOOLEAN DEFAULT FALSE,
  private BOOLEAN NOT NULL DEFAULT FALSE,
  created_at DATETIME NOT NULL,
  updated_at DATETIME NOT NULL,
  deleted BOOLEAN DEFAULT FALSE,
  serialized TEXT NOT NULL,
  PRIMARY KEY (id),
  UNIQUE(tag, type)
) as TagDbEntity;

CREATE INDEX idx_tag_entities_id
ON tag_entities (id);

CREATE INDEX idx_tag_entities_tag
ON tag_entities (tag);

CREATE INDEX idx_tag_entities_type
ON tag_entities (type);

CREATE INDEX idx_tag_entities_private
ON tag_entities (private);

CREATE INDEX idx_tag_entities_inactive
ON tag_entities (inactive);

CREATE TABLE tagged (
  id TEXT NOT NULL UNIQUE,
  journal_id TEXT NOT NULL,
  tag_entity_id TEXT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY(journal_id) REFERENCES journal(id) ON DELETE CASCADE,
  FOREIGN KEY(tag_entity_id) REFERENCES tag_entities(id) ON DELETE CASCADE,
  UNIQUE(journal_id, tag_entity_id)
) as TaggedWith;

CREATE INDEX idx_tagged_journal_id
ON tagged (journal_id);

CREATE INDEX idx_tagged_tag_entity_id
ON tagged (tag_entity_id);

CREATE TABLE linked_entries (
  id TEXT NOT NULL UNIQUE,
  from_id TEXT NOT NULL,
  to_id TEXT NOT NULL,
  type TEXT NOT NULL,
  serialized TEXT NOT NULL,
  PRIMARY KEY (id),
  FOREIGN KEY(from_id) REFERENCES journal(id) ON DELETE CASCADE,
  FOREIGN KEY(to_id) REFERENCES journal(id) ON DELETE CASCADE,
  UNIQUE(from_id, to_id, type)
) as LinkedDbEntry;

CREATE INDEX idx_linked_entries_from_id
ON linked_entries (from_id);

CREATE INDEX idx_linked_entries_to_id
ON linked_entries (to_id);

CREATE INDEX idx_linked_entries_type
ON linked_entries (type);

/* Queries ----------------------------------------------------- */
listConfigFlags:
SELECT *
  FROM config_flags;

filteredJournal:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  ORDER BY date_from DESC
  LIMIT :limit;

filteredByTagJournal:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND private IN :privateStatuses
  ORDER BY date_from DESC
  LIMIT :limit;

filteredTasks:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  ORDER BY date_from DESC
  LIMIT :limit;

filteredTasksByTag:
SELECT * FROM journal
  WHERE type IN :types
  AND deleted = false
  AND id IN :ids
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND starred IN :starredStatuses
  AND task = 1
  AND task_status IN :taskStatuses
  ORDER BY date_from DESC
  LIMIT :limit;

orderedJournal:
SELECT * FROM journal
  WHERE deleted = false
  ORDER BY date_from DESC
  LIMIT :limit
  OFFSET :offset;

entriesFlaggedImport:
SELECT * FROM journal
  WHERE deleted = false AND flag = 1
  ORDER BY date_from DESC
  LIMIT :limit;

conflictsByStatus:
SELECT * FROM conflicts
  WHERE status = :status
  ORDER BY created_at DESC
  LIMIT :limit;

activeMeasurableTypes:
SELECT * FROM measurable_types
  WHERE deleted = false
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY unique_name ASC;

measurableTypeById:
SELECT * FROM measurable_types
  WHERE deleted = false
  AND id = :id
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY unique_name ASC;

measurementsByType:
SELECT * FROM journal
  WHERE type = 'MeasurementEntry'
  AND subtype = :subtype
  AND date_from >= :from
  AND deleted = false
  ORDER BY date_from DESC;

quantitativeByType:
SELECT * FROM journal
  WHERE type = 'QuantitativeEntry'
  AND subtype = :subtype
  AND date_from >= :from
  AND deleted = false
  ORDER BY date_from DESC;

quantitativeByTypes:
SELECT * FROM journal
  WHERE type = 'QuantitativeEntry'
  AND subtype IN :subtypes
  AND date_from >= :from
  AND deleted = false
  ORDER BY date_from DESC;

countJournalEntries:
SELECT COUNT(*) FROM journal
  WHERE deleted = false;

countImportFlagEntries:
SELECT COUNT(*) FROM journal
  WHERE deleted = false AND flag = 1;

allTagEntities:
SELECT * FROM tag_entities
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false
  ORDER BY tag COLLATE NOCASE;

allDashboards:
SELECT * FROM dashboard_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND deleted = false
  ORDER BY name COLLATE NOCASE;

allHabitDefinitions:
SELECT * FROM habit_definitions
  WHERE private IN (0, (SELECT status FROM config_flags WHERE name = 'private'));

matchingTagEntities:
SELECT * FROM tag_entities
  WHERE tag LIKE :match
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  AND inactive IN (0, :inactive)
  AND deleted = false
  LIMIT :limit;

deleteTaggedForId:
DELETE FROM tagged
  WHERE journal_id = :id;

deleteTagged:
DELETE FROM tagged;

entryIdsForTagId:
SELECT journal_id FROM tagged
  WHERE tag_entity_id = :tag_id;

linkedEntriesFor:
SELECT to_id FROM linked_entries
  WHERE from_id = :from_id;

linkedJournalEntities:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT to_id FROM linked_entries WHERE from_id = :from_id)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

linkedToJournalEntities:
SELECT * FROM journal
  WHERE deleted = false
  AND id IN (SELECT from_id FROM linked_entries WHERE to_id = :to_id)
  AND private IN (0, (SELECT status FROM config_flags WHERE name = 'private'))
  ORDER BY date_from DESC;

deleteLink:
DELETE FROM linked_entries
  WHERE from_id = :from_id
  AND to_id = :to_id;
