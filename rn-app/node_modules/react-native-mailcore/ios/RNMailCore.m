
#import "RNMailCore.h"
#import <MailCore/MailCore.h>
#import <React/RCTConvert.h>
#import <Photos/Photos.h>

@implementation RNMailCore

- (dispatch_queue_t)methodQueue
{
    return dispatch_get_main_queue();
}
RCT_EXPORT_MODULE()


RCT_EXPORT_METHOD(sendMail:(NSDictionary *)obj resolver:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    MCOSMTPSession *smtpSession = [[MCOSMTPSession alloc] init];
    smtpSession.hostname = [RCTConvert NSString:obj[@"hostname"]];
    smtpSession.port = [RCTConvert NSUInteger:obj[@"port"]];
    smtpSession.username = [RCTConvert NSString:obj[@"username"]];
    smtpSession.password = [RCTConvert NSString:obj[@"password"]];
    smtpSession.authType = MCOAuthTypeSASLPlain;
    smtpSession.connectionType = MCOConnectionTypeTLS;
    
    MCOMessageBuilder *builder = [[MCOMessageBuilder alloc] init];
    NSDictionary* fromObj = [RCTConvert NSDictionary:obj[@"from"]];
    MCOAddress *from = [MCOAddress addressWithDisplayName:[RCTConvert NSString:fromObj[@"addressWithDisplayName"]]
                                                  mailbox:[RCTConvert NSString:fromObj[@"mailbox"]]];
    
    NSDictionary* toObj = [RCTConvert NSDictionary:obj[@"to"]];
    MCOAddress *to = [MCOAddress addressWithDisplayName:[RCTConvert NSString:toObj[@"addressWithDisplayName"]]
                                                mailbox:[RCTConvert NSString:toObj[@"mailbox"]]];
    [[builder header] setFrom:from];
    [[builder header] setTo:@[to]];
    [[builder header] setSubject:[RCTConvert NSString:obj[@"subject"]]];
    [builder setTextBody:[RCTConvert NSString:obj[@"textBody"]]];
    NSString *uri = [RCTConvert NSString:obj[@"attachmentUri"]];
    
    if (uri) {
        NSURL * url = [[NSURL alloc] initWithString:uri];
        NSLog(@"attachmentUri: %@",url);
        PHFetchResult *assets = [PHAsset fetchAssetsWithALAssetURLs:@[url] options:nil];
        
        PHImageManager *imageManager = [PHImageManager new];
        
        for (PHAsset *asset in assets) {
            [imageManager requestImageDataForAsset:asset
                                           options:0
                                     resultHandler:^(NSData *imageData, NSString *dataUTI, UIImageOrientation orientation, NSDictionary *info) {
                                         MCOAttachment *att = [MCOAttachment attachmentWithData:imageData filename:[RCTConvert NSString:obj[@"filename"]]];
                                         [builder addAttachment:att];
                                         
                                         NSData * rfc822Data = [builder data];
                                         
                                         MCOSMTPSendOperation *sendOperation =
                                         [smtpSession sendOperationWithData:rfc822Data];
                                         [sendOperation start:^(NSError *error) {
                                             if(error) {
                                                 NSLog(@"Error sending email: %@", error);
                                                 reject(@"Error", error.localizedDescription, error);
                                             } else {
                                                 NSLog(@"Successfully sent email!");
                                                 NSDictionary *result = @{@"status": @"SUCCESS"};
                                                 resolve(result);
                                             }
                                         }];
                                     }];
        }
    } else {
        NSData * rfc822Data = [builder data];
        
        MCOSMTPSendOperation *sendOperation =
        [smtpSession sendOperationWithData:rfc822Data];
        [sendOperation start:^(NSError *error) {
            if(error) {
                NSLog(@"Error sending email: %@", error);
                reject(@"Error", error.localizedDescription, error);
            } else {
                NSLog(@"Successfully sent email!");
                NSDictionary *result = @{@"status": @"SUCCESS"};
                resolve(result);
            }
        }];
    }
}

RCT_EXPORT_METHOD(saveImap:(NSDictionary *)obj resolver:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    MCOIMAPSession *session = [[MCOIMAPSession alloc] init];
    session.hostname = [RCTConvert NSString:obj[@"hostname"]];
    session.port = [RCTConvert NSUInteger:obj[@"port"]];
    session.username = [RCTConvert NSString:obj[@"username"]];
    session.password = [RCTConvert NSString:obj[@"password"]];
    session.authType = MCOAuthTypeSASLPlain;
    session.connectionType = MCOConnectionTypeTLS;
    
    MCOMessageBuilder *builder = [[MCOMessageBuilder alloc] init];
    NSDictionary* fromObj = [RCTConvert NSDictionary:obj[@"from"]];
    MCOAddress *from = [MCOAddress addressWithDisplayName:[RCTConvert NSString:fromObj[@"addressWithDisplayName"]]
                                                  mailbox:[RCTConvert NSString:fromObj[@"mailbox"]]];
    
    NSDictionary* toObj = [RCTConvert NSDictionary:obj[@"to"]];
    MCOAddress *to = [MCOAddress addressWithDisplayName:[RCTConvert NSString:toObj[@"addressWithDisplayName"]]
                                                mailbox:[RCTConvert NSString:toObj[@"mailbox"]]];
    [[builder header] setFrom:from];
    [[builder header] setTo:@[to]];
    [[builder header] setSubject:[RCTConvert NSString:obj[@"subject"]]];
    [builder setTextBody:[RCTConvert NSString:obj[@"textBody"]]];
    NSString *uri = [RCTConvert NSString:obj[@"attachmentUri"]];
    NSString *folder = [RCTConvert NSString:obj[@"folder"]];
    
    if (uri) {
        NSURL * url = [[NSURL alloc] initWithString:uri];
        NSLog(@"attachmentUri: %@",url);
        PHFetchResult *assets = [PHAsset fetchAssetsWithALAssetURLs:@[url] options:nil];
        
        PHImageManager *imageManager = [PHImageManager new];
        
        for (PHAsset *asset in assets) {
            [imageManager requestImageDataForAsset:asset
                                           options:0
                                     resultHandler:^(NSData *imageData, NSString *dataUTI, UIImageOrientation orientation, NSDictionary *info) {
                                         MCOAttachment *att = [MCOAttachment attachmentWithData:imageData filename:[RCTConvert NSString:obj[@"filename"]]];
                                         [builder addAttachment:att];
                                         
                                         NSData * rfc822Data = [builder data];
                                         
                                         MCOIMAPAppendMessageOperation *appendOp =
                                         [session appendMessageOperationWithFolder:folder messageData:rfc822Data flags:MCOMessageFlagNone];
                                         
                                         [appendOp start:^(NSError * _Nullable error, uint32_t createdUID) {
                                             if (error) {
                                                 NSLog(@"ERROR appendOp: %@", error);
                                             }
                                             NSLog(@"stored message: %u", createdUID);
                                         }];
                                     }];
        }
    } else {
        NSData * rfc822Data = [builder data];

        MCOIMAPAppendMessageOperation *appendOp =
        [session appendMessageOperationWithFolder:folder messageData:rfc822Data flags:MCOMessageFlagNone];
        
        [appendOp start:^(NSError * _Nullable error, uint32_t createdUID) {
            if (error) {
                NSLog(@"ERROR appendOp: %@", error);
            }
            NSLog(@"stored message: %u", createdUID);
        }];
    }
}

RCT_EXPORT_METHOD(fetchImap:(NSDictionary *)obj resolver:(RCTPromiseResolveBlock)resolve
                  rejecter:(RCTPromiseRejectBlock)reject)
{
    MCOIMAPSession *session = [[MCOIMAPSession alloc] init];
    session.hostname = [RCTConvert NSString:obj[@"hostname"]];
    session.port = [RCTConvert NSUInteger:obj[@"port"]];
    session.username = [RCTConvert NSString:obj[@"username"]];
    session.password = [RCTConvert NSString:obj[@"password"]];
    session.authType = MCOAuthTypeSASLPlain;
    session.connectionType = MCOConnectionTypeTLS;
    
    MCOIndexSet *uidSet = [MCOIndexSet indexSetWithRange:MCORangeMake(1,UINT64_MAX)];
    MCOIMAPFetchMessagesOperation *fetchOp =
    [session fetchMessagesByUIDOperationWithFolder:@"INBOX"
                                        requestKind:MCOIMAPMessagesRequestKindHeaders
                                                uids:uidSet];
    
    [fetchOp start:^(NSError *err, NSArray *msgs, MCOIndexSet *vanished) {
        NSLog(@"Fetched all the message headers!.");
    }];
}

@end
