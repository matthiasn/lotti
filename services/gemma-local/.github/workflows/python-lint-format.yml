name: Python Code Quality

on:
  push:
    branches: ["**"]
    paths:
      - "services/gemma-local/**/*.py"
      - "services/gemma-local/.flake8"
      - "services/gemma-local/mypy.ini"
      - "services/gemma-local/.pre-commit-config.yaml"
      - ".github/workflows/python-lint-format.yml"
  pull_request:
    branches: ["main", "develop"]
    paths:
      - "services/gemma-local/**/*.py"
      - "services/gemma-local/.flake8"
      - "services/gemma-local/mypy.ini"

jobs:
  code-quality:
    name: Python Code Quality Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: services/gemma-local

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black flake8 mypy bandit
          pip install flake8-bugbear flake8-comprehensions flake8-simplify
          # Install project dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Check code formatting with Black
        run: |
          echo "::group::Black Format Check"
          black --check --diff --line-length=120 src/ tests/ || {
            echo "❌ Code formatting issues found!"
            echo "Run 'black --line-length=120 src/ tests/' to fix formatting"
            exit 1
          }
          echo "✅ Code formatting is correct"
          echo "::endgroup::"

      - name: Lint with Flake8
        run: |
          echo "::group::Flake8 Linting"
          flake8 src/ tests/ --statistics --count --show-source || {
            echo "❌ Linting issues found!"
            echo "Check the output above and fix the issues"
            exit 1
          }
          echo "✅ No linting issues found"
          echo "::endgroup::"

      - name: Type check with MyPy
        run: |
          echo "::group::MyPy Type Checking"
          mypy src/ --config-file=mypy.ini || {
            echo "❌ Type checking issues found!"
            echo "Check the output above and fix type annotations"
            exit 1
          }
          echo "✅ Type checking passed"
          echo "::endgroup::"

      - name: Security check with Bandit
        run: |
          echo "::group::Bandit Security Check"
          bandit -r src/ tests/ --format json --severity-level medium || {
            echo "❌ Security issues found!"
            echo "Check the output above and fix security issues"
            exit 1
          }
          echo "✅ No security issues found"
          echo "::endgroup::"

      - name: Generate code quality report
        if: always()
        run: |
          echo "## 📊 Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count lines of code
          TOTAL_LINES=$(find src/ tests/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "- **Total Lines of Code**: $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY

          # Flake8 issues
          FLAKE8_ISSUES=$(flake8 src/ tests/ --count 2>/dev/null || echo "0")
          echo "- **Flake8 Issues**: $FLAKE8_ISSUES" >> $GITHUB_STEP_SUMMARY

          # MyPy errors
          MYPY_ERRORS=$(mypy src/ --config-file=mypy.ini 2>&1 | grep -c "error:" || echo "0")
          echo "- **MyPy Errors**: $MYPY_ERRORS" >> $GITHUB_STEP_SUMMARY

          # Security issues
          SECURITY_ISSUES=$(bandit -r src/ tests/ --format json --severity-level medium 2>/dev/null | jq '.results | length' 2>/dev/null || echo "0")
          echo "- **Security Issues**: $SECURITY_ISSUES" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Generated by Python Code Quality workflow*" >> $GITHUB_STEP_SUMMARY